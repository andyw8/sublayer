---
http_interactions:
- request:
    method: post
    uri: https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key=<GEMINI_API_KEY>
    body:
      encoding: UTF-8
      string: '{"contents":{"role":"user","parts":{"text":"        You are an experienced
        software engineer. Below is a chunk of code:\n\n        #!/usr/bin/env ruby\n\n        require
        ''optparse''\n\n        options = {}\n        OptionParser.new do |opts|\n          opts.banner
        = \"Usage: hello.rb [options]\"\n\n          opts.on(\"-w\", \"--who PERSON\",
        \"Name of the person to greet\") do |person|\n            options[:who] =
        person\n          end\n        end.parse!\n\n        who = options[:who] ||
        \"world\"\n        puts \"Hello, #{who}!\"\n\n        Please read the code
        carefully and provide a high-level description of what this code does, including
        its purpose, functionalities, and any noteworthy details.\n"}},"tools":{"functionDeclarations":[{"name":"code_description","description":"A
        description of what the code does, its purpose,functionality, and any noteworthy
        details","parameters":{"type":"OBJECT","properties":{"code_description":{"type":"STRING","description":"A
        description of what the code does, its purpose,functionality, and any noteworthy
        details"}},"required":["code_description"]}}]},"tool_config":{"function_calling_config":{"mode":"ANY","allowed_function_names":["code_description"]}}}'
    headers:
      Content-Type:
      - application/json
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Mon, 22 Jul 2024 21:43:47 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Server-Timing:
      - gfet4t7; dur=7267
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "candidates": [
            {
              "content": {
                "parts": [
                  {
                    "functionCall": {
                      "name": "code_description",
                      "args": {
                        "code_description": "This Ruby code is a simple command-line program that greets a person by name. \\n\\nHere is a breakdown of the code:\\n\\n1. **Requires the `optparse` library:** This line includes the `optparse` library, which is used for parsing command-line options.\\n2. **Initializes an options hash:** `options = {}` creates an empty hash called `options` to store command-line arguments.\\n3. **Defines command-line options:**\\n   - `OptionParser.new do |opts| ... end.parse!` creates a new OptionParser object and defines the command-line options.\\n   - `opts.banner = \"Usage: hello.rb [options]\"` sets the banner message displayed at the top of the help text.\\n   - `opts.on(\"-w\", \"--who PERSON\", \"Name of the person to greet\") do |person| ... end` defines an option `-w` or `--who` that takes a `PERSON` argument. The value of the argument is stored in the `options[:who]` hash.\\n4. **Gets the name to greet:**\\n   - `who = options[:who] || \"world\"` retrieves the value of the `:who` option from the `options` hash. If the option is not provided, it defaults to \"world\".\\n5. **Prints the greeting:**\\n   - `puts \"Hello, #{who}!\"` prints the greeting message with the name of the person being greeted."
                      }
                    }
                  }
                ],
                "role": "model"
              },
              "finishReason": "STOP",
              "index": 0,
              "safetyRatings": [
                {
                  "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                  "probability": "NEGLIGIBLE"
                },
                {
                  "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                  "probability": "NEGLIGIBLE"
                },
                {
                  "category": "HARM_CATEGORY_HARASSMENT",
                  "probability": "NEGLIGIBLE"
                },
                {
                  "category": "HARM_CATEGORY_HATE_SPEECH",
                  "probability": "NEGLIGIBLE"
                }
              ]
            }
          ],
          "usageMetadata": {
            "promptTokenCount": 228,
            "candidatesTokenCount": 346,
            "totalTokenCount": 574
          }
        }
  recorded_at: Mon, 22 Jul 2024 21:43:47 GMT
recorded_with: VCR 6.2.0
