---
http_interactions:
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"user","content":"    You
        are an expert ruby programmer and great at repurposing code examples to use
        for new situations.\n\n    A Sublayer agent is a DSL for defining a feedback
        loop for an AI agent. The agents sit running like a daemon and are triggered
        to run and step toward their goal checking status along the way.\n\n    One
        example of a Sublayer agent is this one for doing TDD with RSpec:\n    <example_tdd_agent>\n    class
        RSpecAgent < Sublayer::Agents::Base\n  def initialize(implementation_file_path:,
        test_file_path:)\n    @implementation_file_path = implementation_file_path\n    @test_file_path
        = test_file_path\n    @tests_passing = false\n  end\n\n  trigger_on_files_changed
        { [@implementation_file_path, @test_file_path] }\n\n  goal_condition { @tests_passing
        == true }\n\n  check_status do\n    stdout, stderr, status = Sublayer::Actions::RunTestCommandAction.new(\n      test_command:
        \"rspec #{@test_file_path}\"\n    ).call\n\n    @test_output = stdout\n    @tests_passing
        = (status.exitstatus == 0)\n  end\n\n  step do\n    modified_implementation
        = Sublayer::Generators::ModifiedImplementationToPassTestsGenerator.new(\n      implementation_file_contents:
        File.read(@implementation_file_path),\n      test_file_contents: File.read(@test_file_path),\n      test_output:
        @test_output\n    ).generate\n\n    Sublayer::Actions::WriteFileAction.new(\n      file_contents:
        modified_implementation,\n      file_path: @implementation_file_path\n    ).call\n  end\nend\n\n    </example_tdd_agent>\n\n    Sublayer
        Agents take advantage of other Sublayer components to perform their tasks.\n    Sublayer::Actions
        are used to perform actions in the outside world, things like saving files,
        making external api calls, retrieving data, etc\n    Sublayer::Generators
        are used to make calls to LLMs based on information they receive from Sublayer::Actions
        or other sources and return structured data for other Sublayer::Actions to
        do use in the outside world\n\n    The Sublayer Agent DSL consists of 4 main
        parts:\n    1. trigger: What triggers the agent, currently built into the
        framework is the trigger_on_files_changed, but the trigger method also accepts
        a Sublayer::Triggers::Base subclass that defines an initialize method and
        a setup method that takes an agent as an argument\n                The setup
        method then calls activate(agent) when the trigger condition is met\n    2.
        goal: What the agent is trying to achieve, this is a block that returns a
        boolean\n    3. check_status: A method that checks the status of the agent
        on its way toward the goal. Usually you update the goal condition here or
        can perform any Sublayer::Actions to examine the state of the outside world\n    4.
        step: A method that encapsulates the way the agent should work toward the
        goal. Sublayer::Actions and Sublayer::Generators are used heavily here.\n\n    Your
        goal is to rely on the above information about how Sublayer Agents work to
        generate a new Sublayer agent based on the following information:\n\n    Agent
        description: a sublayer agent that monitors a transcription folder and updates
        a notion crm with information from the latest transcriptions\n    Trigger
        condition: \n    Goal condition: all the transcription files in the folder
        have been processed\n    Status check method: see if there are any files in
        the transcription folder that havent been procesed\n    Step action method:
        take an unprocessed transcription file, generate a summary, and any followups,
        and update the notion crm with the information\n\n    You can assume that
        any Sublayer::Actions or Sublayer::Generators you need are available to you
        in the Sublayer framework\n\n    Take a deep breath and think step by step
        before coding. You can do this!\n"}],"tool_choice":{"type":"function","function":{"name":"sublayer_agent"}},"tools":[{"type":"function","function":{"name":"sublayer_agent","description":"The
        new sublayer agent based on the description and supporting information","parameters":{"type":"object","properties":{"sublayer_agent":{"type":"object","description":"The
        new sublayer agent based on the description and supporting information","properties":{"code":{"type":"string","description":"The
        code of the generated Sublayer agent"},"filename":{"type":"string","description":"The
        filename of the generated sublayer agent snake cased with a .rb extension"}},"required":["code","filename"]}}},"required":["sublayer_agent"]}}]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 29 Aug 2024 02:11:07 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - sublayer
      Openai-Processing-Ms:
      - '3966'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15552000; includeSubDomains; preload
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '10000000'
      X-Ratelimit-Remaining-Requests:
      - '9999'
      X-Ratelimit-Remaining-Tokens:
      - '9999069'
      X-Ratelimit-Reset-Requests:
      - 6ms
      X-Ratelimit-Reset-Tokens:
      - 5ms
      X-Request-Id:
      - req_edd4c80766304c4cec3bc673dd15c74c
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=vLqCHS8I0bZDMzr7EIJiRFN6MvZSrE6FXZUcf49JZh4-1724897467-1.0.1.1-SnBwRczWHPfXQLZl4inc_DFbuZWzM8r9yFc88R52ey6bbsZzwopD1gSj7tiUUFs3tfp5V2joEfn1xtyYDMbxWw;
        path=/; expires=Thu, 29-Aug-24 02:41:07 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=MS8cIRI.Fw5AKFj11aNtwGwjO0T9OT7on32uDfcuwsk-1724897467804-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 8ba9021af953430e-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-A1Oulw0wXxGTEptK6FT4mZfBe4mIL",
          "object": "chat.completion",
          "created": 1724897463,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": null,
                "tool_calls": [
                  {
                    "id": "call_jSKNvLx7n7i1Ylicx1mIj05m",
                    "type": "function",
                    "function": {
                      "name": "sublayer_agent",
                      "arguments": "{\"sublayer_agent\":{\"code\":\"class NotionCRMTranscriptionAgent < Sublayer::Agents::Base\\n  def initialize(transcription_folder_path:, notion_api_client:)\\n    @transcription_folder_path = transcription_folder_path\\n    @notion_api_client = notion_api_client\\n  end\\n\\n  trigger_on_files_changed { Dir.glob(File.join(@transcription_folder_path, '*.txt')) }\\n\\n  goal_condition do\\n    Dir.glob(File.join(@transcription_folder_path, '*.txt')).empty?\\n  end\\n\\n  check_status do\\n    @unprocessed_files = Dir.glob(File.join(@transcription_folder_path, '*.txt'))\\n  end\\n\\n  step do\\n    return if @unprocessed_files.empty?\\n\\n    transcription_file = @unprocessed_files.first\\n    summary = Sublayer::Generators::SummaryGenerator.new(\\n      file_contents: File.read(transcription_file)\\n    ).generate\\n\\n    follow_ups = Sublayer::Generators::FollowUpGenerator.new(\\n      summary: summary\\n    ).generate\\n\\n    Sublayer::Actions::UpdateNotionCRMAction.new(\\n      notion_api_client: @notion_api_client,\\n      summary: summary,\\n      follow_ups: follow_ups\\n    ).call\\n\\n    File.delete(transcription_file)\\n  end\\nend\\n\",\"filename\":\"notion_crm_transcription_agent.rb\"}}"
                    }
                  }
                ],
                "refusal": null
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 901,
            "completion_tokens": 292,
            "total_tokens": 1193
          },
          "system_fingerprint": "fp_9722793223"
        }
  recorded_at: Thu, 29 Aug 2024 02:11:07 GMT
recorded_with: VCR 6.2.0
