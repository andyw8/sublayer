---
http_interactions:
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"user","content":"    You
        are an expert ruby programmer and are great at repurposing code examples to
        use for new situations.\n\n    A Sublayer Action is an example of a command
        pattern that is used in the Sublayer AI framework to perform actions in the
        outside world such as manipulating files or making API calls.\n\n    The Sublayer
        framework also has a component called a Generator that takes data in, sends
        it to an LLM and gets structured data out.\n    Sublayer::Actions are used
        both to retrieve data for use in a generator or perform actions based on the
        output of the generator.\n    This is used to both aid in generating new composable
        bits of functionality and to ease testing.\n\n    A sublayer action is initialized
        with the data it needs and then exposes a `call` method which is used to perform
        the action.\n\n    An example of an action being used to save a file to the
        file system, for example after generating the contents is:\n    <example_file_manipulation_action>\n    class
        WriteFileAction < Sublayer::Actions::Base\n  def initialize(file_contents:,
        file_path:)\n    @file_contents = file_contents\n    @file_path = file_path\n  end\n\n  def
        call\n    File.open(@file_path, ''wb'') do |file|\n      file.write(@file_contents)\n    end\n  end\nend\n\n    </example_file_manipulation_action>\n\n    An
        example action being used to make a call to an external api, such as OpenAI''s
        text to speech API is:\n    <example_api_call_action>\n    class TextToSpeechAction
        < Sublayer::Actions::Base\n  def initialize(text)\n    @text = text\n  end\n\n  def
        call\n    speech = HTTParty.post(\n      \"https://api.openai.com/v1/audio/speech\",\n      headers:
        {\n        \"Authorization\" => \"Bearer #{ENV[\"OPENAI_API_KEY\"]}\",\n        \"Content-Type\"
        => \"application/json\",\n      },\n      body: {\n        \"model\": \"tts-1\",\n        \"input\":
        @text,\n        \"voice\": \"nova\",\n        \"response_format\": \"wav\"\n      }.to_json\n    )\n\n    speech\n  end\nend\n\n    </example_api_call_action>\n\n    Your
        task is to generate a new Sublayer::Action::Base subclass that performs an
        action based on the description provided.\n    <description>\n    a sublayer
        action that sends a notification to a particular discord channel\n    </description>\n"}],"tool_choice":{"type":"function","function":{"name":"sublayer_action"}},"tools":[{"type":"function","function":{"name":"sublayer_action","description":"The
        new sublayer action based on the description and supporting information","parameters":{"type":"object","properties":{"sublayer_action":{"type":"object","description":"The
        new sublayer action based on the description and supporting information","properties":{"code":{"type":"string","description":"The
        code of the generated Sublayer action"},"filename":{"type":"string","description":"The
        filename of the generated sublayer action snake cased with a .rb extension"}},"required":["code","filename"]}}},"required":["sublayer_action"]}}]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 29 Aug 2024 21:34:01 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - sublayer
      Openai-Processing-Ms:
      - '2701'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15552000; includeSubDomains; preload
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '10000000'
      X-Ratelimit-Remaining-Requests:
      - '9999'
      X-Ratelimit-Remaining-Tokens:
      - '9999439'
      X-Ratelimit-Reset-Requests:
      - 6ms
      X-Ratelimit-Reset-Tokens:
      - 3ms
      X-Request-Id:
      - req_62d729b0dfc2533de037581a1f88ef15
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=d36uvcIPFKKItoH6Et9XlCa4RT04qRIi3hNAPQUHw18-1724967241-1.0.1.1-DfQ8XrPht7_jTYBd4XNYjgSKHYCE17Znp_zNvjYCq2Q6X81mzpL5KdhBzEkkOEWvsfSOJ34DzbXEYG6etw91GA;
        path=/; expires=Thu, 29-Aug-24 22:04:01 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=ZUjYHKvZQO1a36Hs9t7pYezVWa9hCA8khYDpkSkP5n4-1724967241589-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 8bafa99a8e078cc0-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-A1h4A2qCXK5ZkD137tD99z4Itd3Ga",
          "object": "chat.completion",
          "created": 1724967238,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": null,
                "tool_calls": [
                  {
                    "id": "call_X1MXDH1OkbPzuhBU7T5wzqOc",
                    "type": "function",
                    "function": {
                      "name": "sublayer_action",
                      "arguments": "{\"sublayer_action\":{\"code\":\"class SendDiscordNotificationAction < Sublayer::Actions::Base\\n  def initialize(channel_id:, message:)\\n    @channel_id = channel_id\\n    @message = message\\n  end\\n\\n  def call\\n    response = HTTParty.post(\\n      \\\"https://discord.com/api/v10/channels/#{@channel_id}/messages\\\",\\n      headers: {\\\"Authorization\\\" => \\\"Bot #{ENV['DISCORD_BOT_TOKEN']}\\\", \\\"Content-Type\\\" => \\\"application/json\\\"},\\n      body: {\\\"content\\\" => @message}.to_json\\n    )\\n    response\\n  end\\nend\\n\",\"filename\":\"send_discord_notification_action.rb\"}}"
                    }
                  }
                ],
                "refusal": null
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 617,
            "completion_tokens": 150,
            "total_tokens": 767
          },
          "system_fingerprint": "fp_f33667828e"
        }
  recorded_at: Thu, 29 Aug 2024 21:34:01 GMT
recorded_with: VCR 6.2.0
